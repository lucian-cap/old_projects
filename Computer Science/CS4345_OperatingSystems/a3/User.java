/*
Course Number: CS4345 Operating Systems
Time: Spring/2019
Name: Assignment 3
Group: Caleb Watson, Chase Perry
*/


import java.net.*;
import java.io.*;
import java.util.*;
import java.util.concurrent.*;


//User class, main one to be run by a user to enter the chatroom. Implements runnable so that it can be run on a thread
public class User implements Runnable{
    private String name;
    private String password;
    private Thread userThread;
    private Socket userSocket;
    private Scanner inputFromUser;
    private DataOutputStream outputToServer;
    private UserThread userConnectionToServer;

    //creates the user object, passing on the name and password, probably only needs the name but both feels better
    //upon initialization creates a new socket, new User thread with the user and user's socket, scanner to get input, an outputstream to send data to the server (to be picked up by the ServerThread), 
    //a thread to run the User, and starts said thread
    public User(String name, String password){
        try{
            this.name = name;
            this.password = password;
            userSocket = new Socket("127.0.0.1", 1);
            userConnectionToServer = new UserThread(this, userSocket);
            inputFromUser = new Scanner(System.in);
            outputToServer = new DataOutputStream(userSocket.getOutputStream()); //sends data to server
            userThread = new Thread(this);
            userThread.start();
        } catch(Exception e){System.out.println("User creation error " + e);}
    }

    //when the thread the user object is on is started, this is run
    public void run(){
        try{
            //the autogenerated welcome message when the user is created/started/joins the chatroom
            outputToServer.writeUTF("Welcome " + this.name + "!");
        } catch(Exception e){System.out.println("Error trying to welcome user " + e);}
        //while the thread the user is on isn't null, read input from user and send it to the server. If the input is the exit message then interrupt the UserThread object and make in null for the User object
            while(userThread != null){
            try{
                String userMessage = inputFromUser.nextLine();
                outputToServer.writeUTF((this.name + ": " + userMessage));
                if(userMessage.equals("/exit")){
                    //userSocket.close();
                    userThread.interrupt();
                    userThread = null;
                }
            } catch (Exception e){System.out.println("Error reading input from user " + e);}
        }
    }

    //when the UserThread object gets a message, it call this message with its user to print the message out on the users console
    public void newMessage(String message){
        System.out.println(message);
    }


    
    public static void main(String[] args){
        
        //start of the logic to decide whether user with sign up or in
        System.out.println("Would you like to sign up or login? (Enter '1' for signup and '2' for sign in)");
        Scanner in = new Scanner(System.in);

        String choice = in.nextLine();
        while(!choice.equals("1") && !choice.equals("2")){
            System.out.println("Sorry, choice wasn't recognized. Please choose either '1', to sign up, or '2', to login");
            choice = in.nextLine();
        }


        
        User u;
        
        if(choice.equals("1")){
            u = signUp(in);
        }
        else {
            u = login(in);
        }
        
        //general useful messages the user will need to know
        System.out.println("\n\n\nEnter '/exit' at any point to leave.");
        System.out.println("Put '/whisper:username' before your message to direct message another user. Replacing 'username' with the other users username.\n\n\n");


    }







    //reads the text file to get all the login information currently saved there
    static HashMap<String, String> getUserInfo() throws IOException {
        HashMap<String, String> userInfo = new HashMap<String, String>();

        File file = new File("loginInfo.txt");
        BufferedReader br = new BufferedReader(new FileReader(file));
        String temp;
        while ((temp = br.readLine()) != null) {
            String userName = temp.substring(0, temp.indexOf(':'));
            String password = temp.substring(temp.indexOf(':') + 1);
            userInfo.put(userName, password);
        }
        br.close();

        return userInfo;
    }

    //if a user signs up, this method is called to input this information into the login file to save it for later use
    static void logUserInfo(String username, String pass) throws IOException {
        FileWriter fileWriter = new FileWriter("loginInfo.txt", true);

        PrintWriter printWriter = new PrintWriter(fileWriter);
        printWriter.print("\n" + username + ":" + pass);
        printWriter.close();

    }

    //gets user input to login with, checks to see if the username entered is one that is in the file and if the password matches then creates the user object and passes it back to the main method
    static User login(Scanner inScanner) {
        Scanner in = inScanner; //new Scanner(System.in);
        System.out.println("Please enter your username:");
        String newUser = in.nextLine();
        System.out.println("Please enter your password:");
        String newPassword = in.nextLine();
        HashMap<String, String> userInfo = new HashMap<String, String>();
        try {
            userInfo = getUserInfo();
        } catch (Exception e) {
            System.err.println(e);
        }
        if(userInfo.containsKey(newUser)){
            //while the password entered doesn't match the username entered, keeps querying for the correct info
            while (!userInfo.get(newUser).toString().equals(newPassword)) {
                System.out.println("The login info you entered didn't match any records. Please try again.");
                System.out.println("Please enter your username:");
                newUser = in.nextLine();
                System.out.println("Please enter your password:");
                newPassword = in.nextLine();
            }
        }
        else{
            //while the username entered and password entered don't match anything, keep getting input
            while(!userInfo.containsKey(newUser) && !newPassword.equals(userInfo.get(newUser))){
                System.out.println("The login info you entered didn't match any records. Please try again.");
                System.out.println("Please enter your username:");
                newUser = in.nextLine();
                System.out.println("Please enter your password:");
                newPassword = in.nextLine();
            }
        }
        User user = new User(newUser, newPassword);
        //in.close();
        return user;
    }

    //handles the sign up logic, if the username entered contains the ':' character or is already in user, keep getting new input
    static User signUp(Scanner inScanner) {
        HashMap<String, String> userInfo = new HashMap<String, String>();
        try {
            userInfo = getUserInfo();
        } catch (Exception e) {
            System.err.println(e);
        }
        Scanner in = inScanner; //new Scanner(System.in);
        System.out.println("Please enter a username (Cannot contain ':')    :");
        String newUser = in.nextLine();
        while (userInfo.containsKey(newUser) || newUser.contains(":")) {
            System.out.println("The username you entered is already in use or contains ':', please enter a new Username: ");
            newUser = in.nextLine();
        }
        System.out.println("Please enter a password:");
        String newPassword = in.nextLine();
        
        //logs the new info in with the rest in the text file
        try {
            logUserInfo(newUser, newPassword);
        } catch (Exception e) {
            System.err.println(e);
        }

        User user = new User(newUser, newPassword);
        //in.close();
        return user;
    }

}