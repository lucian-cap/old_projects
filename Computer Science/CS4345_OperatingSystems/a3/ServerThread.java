/*
Course Number: CS4345 Operating Systems
Time: Spring/2019
Name: Assignment 3
Group: Caleb Watson, Chase Perry
*/


import java.net.*;
import java.io.*;
import java.util.*;

//this class ties the server and user together, along with the other Thread class. it extends the thread class so that it can be used outside of direct use from the server class (other than construction)
//specifically this class is intended to read input into the server from each user (socket), and send that input to the actual server via a custom message to be handled
public class ServerThread extends Thread{
   private Server chatroom;
   private Socket user;
   private DataInputStream in;
   private DataOutputStream out;
   private String name = "";

   //constructed using a server and Socket, once it's been created the object is started (which invokes the run() method)
    public ServerThread(Server s, Socket soc) {
        try {
            this.chatroom = s;
            this.user = soc;
            in = new DataInputStream(user.getInputStream()); //what server sends to user
            out = new DataOutputStream(user.getOutputStream()); //gets what user sends to server
            start();
        } catch (Exception e) {
            System.out.println("error trying to create a server thread " + e);
        }
    }


    //while the object hasn't been interrupted, runs
    public void run(){
        while(true && !this.isInterrupted()){
            try{
                String temp = in.readUTF();
                //the welcome message is auto generated when a user joins and is sent to the server. That message is sent here which is eventually used to set the name for the thread
                if(temp.substring(0, 7).equals("Welcome") && temp.charAt(temp.length()-1)=='!'){
                    this.setName(temp.substring(8, temp.indexOf("!")));
                }
                chatroom.newMessage(temp);
                
            } catch (Exception e){
                System.out.println("Server thread running issue " + e);
                this.interrupt();
            }
        }
    }

    //handles sending each message to each user, along with the logic of a user quiting
    public void send(String message){
        try{
            //if the message is an exit message, then check to see if it was generated by this users connection. If so, end the UserThread, and interrupt this thread (kill connection)
            if(message.substring(message.indexOf(" ")).equals(" has left the chat.")){
                if(message.substring(0, message.indexOf(" ")).equals(this.getName())){
                    out.writeUTF("exitCommand");
                    
                    this.interrupt();
                }
                else{
                    //if it is an exit message, but not made by this user, quit
                    out.writeUTF(message);
                }
            }
            //if not an exit message just write the thing to everyone
            else{
                out.writeUTF(message);
            }
               

        } catch(Exception e){System.out.println("Error trying to send message from server to user "  + e);}
    }


    //I think this could be removed, but I'm scared to touch it in case something breaks
    public void setNameCustom(String newName){
        this.name = newName;
    }
    
}